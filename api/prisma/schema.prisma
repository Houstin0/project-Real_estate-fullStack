// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int?
  bathroom   Int?
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
  commercial
  villa
}


model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @unique @db.ObjectId
  postId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

enum Role {
  ADMIN
  USER
}
model Conversation {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String     @db.ObjectId
  user2Id   String     @db.ObjectId
  messages  Message[]  @relation("ConversationMessages")  // Renamed for clarity
  
  user1     User       @relation("User1Conversations", fields: [user1Id], references: [id])
  user2     User       @relation("User2Conversations", fields: [user2Id], references: [id])

  // Ensure unique conversations between user1 and user2
  @@unique([user1Id, user2Id])
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String        @db.ObjectId
  senderId       String        @db.ObjectId
  receiverId     String        @db.ObjectId
  content        String
  createdAt      DateTime      @default(now())

  conversation   Conversation   @relation("ConversationMessages", fields: [conversationId], references: [id])
  sender         User           @relation("SenderMessages", fields: [senderId], references: [id])
  receiver       User           @relation("ReceiverMessages", fields: [receiverId], references: [id])
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  email             String          @unique
  username          String          @unique
  password          String
  avatar            String?
  createdAt         DateTime        @default(now())
  posts             Post[]
  savedPosts        SavedPost[]
  conversationsAsUser1 Conversation[] @relation("User1Conversations")
  conversationsAsUser2 Conversation[] @relation("User2Conversations")
  messagesSent      Message[]       @relation("SenderMessages")
  messagesReceived  Message[]       @relation("ReceiverMessages")
  role              Role            @default(USER)
}

